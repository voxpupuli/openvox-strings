# frozen_string_literal: true

require 'spec_helper_acceptance'

describe 'Generating Markdown' do
  let(:test_module_path) do
    sut_module_path(/Module test/)
  end

  let(:remote_tmp_path) do
    sut_tmp_path
  end

  expected = <<~EOF
    # Reference

    <!-- DO NOT EDIT: This document was generated by Puppet Strings -->

    ## Table of Contents

    ### Classes

    * [`test`](#test): Class: test    This class exists to serve as fixture data for testing the puppet strings face

    ## Classes

    ### <a name="test"></a>`test`

    Class: test

      This class exists to serve as fixture data for testing the puppet strings face

    #### Examples

    ##### Basic usage

    ```puppet
    class { "test": }
    ```

    #### Parameters

    The following parameters are available in the `test` class:

    * [`package_name`](#-test--package_name)
    * [`service_name`](#-test--service_name)
    * [`myenum`](#-test--myenum)

    ##### <a name="-test--package_name"></a>`package_name`

    Data type: `Any`

    The name of the package

    Default value: `$test::params::package_name`

    ##### <a name="-test--service_name"></a>`service_name`

    Data type: `Any`

    The name of the service

    Default value: `$test::params::service_name`

    ##### <a name="-test--myenum"></a>`myenum`

    Data type: `Enum['a', 'b']`



    Options:

    * **a**: Option A
    * **b**: Option B

    Default value: `'a'`

  EOF

  it 'renders Markdown to stdout when using --format markdown' do
    skip('This test is broken. Does not output to STDOUT by default.')
    output = PuppetLitmus::PuppetHelpers.run_shell("puppet strings generate --format markdown \"#{test_module_path}/manifests/init.pp\"").stdout.chomp
    expect(output).to eq(expected)
  end

  it 'writes Markdown to a file when using --format markdown and --out' do
    tmpfile = File.join(remote_tmp_path, 'md_output.md')
    PuppetLitmus::PuppetHelpers.run_shell("puppet strings generate --format markdown --out \"#{tmpfile}\" \"#{test_module_path}/manifests/init.pp\"")
    expect(file(tmpfile)).to contain expected
  end
end
